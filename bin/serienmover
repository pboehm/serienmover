#!/usr/bin/env ruby
# -*- ruby -*-
# encoding: UTF-8

$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')

require 'serienmover'
require 'serienrenamer'
require 'fileutils'
require 'hashconfig'
require 'optparse'
require 'highline/import'
require "highline/system_extensions"
include HighLine::SystemExtensions

# create program configuration dirs/files
CONFIG_DIR  = File.join( File.expand_path("~"), ".serienmover" )
CONFIG_FILE = File.join( CONFIG_DIR, "config.yml" )
FileUtils.mkdir(CONFIG_DIR) unless File.directory?(CONFIG_DIR)

###
# configuration
STANDARD_CONFIG = {
  :default_directory      => File.join(File.expand_path("~"), "Downloads"),
  :series_directories     => [],
  :read_episode_info      => false,
  :store_path             => '',
  :byte_count_for_md5     => 2048,
  :post_copy_hook         => '',
  :auto_process_enable    => false,
  :auto_default_action    => :copy,  # or :move
  :auto_exceptions        => [       # Series that should have the other action
    'SERIES_DOESN_NOT_EXISTS',
],
}

config = STANDARD_CONFIG.merge_with_serialized(CONFIG_FILE)

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($PROGRAM_NAME)} [DIR]"

  opts.separator("")
  opts.separator("Tool that moves series episodes into a specific")
  opts.separator("directory structure.")
  opts.separator("")
  opts.separator("  Options:")

  opts.on( "-s", "--seriesdir=DIR", String,
          "Directory that contains series data (multiple allowed)") do |dirs|
    dirs = [ dirs ] if dirs.is_a? String

    dirs.each do |d|
      if File.directory?(d)
        config[:series_directories] << d
      end
    end
          end

  opts.on( "-i", "--ignore-seriesinfo",
          "do not use the information from the infostore") do |opt|
    config[:read_episode_info] = false
          end

  opts.on( "-n", "--no-autoprocess",
          "disables auto processing") do |opt|
    config[:auto_process_enable] = false
          end

  opts.on( "-v", "--version",
          "Outputs the version number.") do |opt|
    puts Serienmover::VERSION
    exit
          end

  opts.separator("")
  opts.separator("  Arguments:")
  opts.separator("     DIR      The path that includes the episodes")
  opts.separator("              defaults to ~/Downloads")
  opts.separator("")
end.parse!


class Serienmover::Cmdline

  def initialize(config, options)
    @config = config
    @options = options

    @series_store = Serienmover::SeriesStore.new(@config[:series_directories])
    @info_store = Serienrenamer::InformationStore.new(
    @config[:store_path], @config[:byte_count_for_md5])

    @processable_files = []
  end

  def process
    chdir

    Dir.new('.').to_a.sort.each do |file|
      determine_target_and_action file
    end

    exit if @processable_files.empty?

    exit unless should_start_with_processing?

    puts "\nEpisodes will be processed now"

    @processable_files.each do |episode|
      apply_action_on_episode episode
    end
  end


  def chdir
    episode_directory = ARGV.pop || @config[:default_directory]

    fail "'#{episode_directory}' does not exist or is not a directory" unless
        Dir.exists?(episode_directory)
    Dir.chdir(episode_directory)
  end


  def determine_target_and_action(file)
    return if file.match(/^\./)
    return unless File.file? file
    return unless Serienrenamer::Episode.determine_video_file(file)

    puts "\n\n"
    p file

    episode = Serienrenamer::Episode.new(file)

    # get seriesname from the informationstore which is used by
    # serienrenamer to store the seriesname when it renames files
    md5 = episode.md5sum(@config[:byte_count_for_md5])
    series = @info_store.episode_hash[md5]

    options = {}
    if @config[:read_episode_info] && series && series.match(/\w+/)
      options[:series] = series
    end

    targets = @series_store.find_suitable_target(episode, options)
    selected_target = nil

    ###
    # process the targets
    case targets.size
    when 0
      puts "No suitable target found\n"
      return
    when 1
      selected_target = targets[0]
    else

      puts "Available targets:"
      choose do |menu|
        menu.prompt = "Choose the right target: "

        targets.each do |t|
          menu.choice t.series do lambda { selected_target = t }.call end
        end
      end
    end

    if selected_target
      puts ">> '%s'" % selected_target
      episode.target = selected_target

      # get the choice from the autoprocess
      copy = nil
      if @config[:auto_process_enable]

        if @config[:auto_default_action] == :copy and not
          @config[:auto_exceptions].include? episode.target.series
          copy = true
        else
          copy = false
        end
      end

      ###
      # ask for the action (copy/move)
      print "What should be done ( [c]opy (*) , [m]ove ): "
      char = nil

      if copy.nil?
        char = get_character
        print char.chr unless char.chr.match(/\r/)

        unless char.chr.match(/[kcmv\r]/i)
          puts "\nwill be skipped ...\n\n"
          return
        end
      end

      if copy == true || char && char.chr.match(/[kc\r]/i)
        episode.set_action(copy: true)
        print " ... copy"
      else
        episode.set_action(move: true)
        print " ... move"
      end

      ###
      # save the episode and set the target as used
      @series_store.set_target_to_used(episode, selected_target)

      @processable_files << episode
    end
  end


  def apply_action_on_episode(episode)
    puts "%s '%s' to '%s'" % [episode.action.capitalize, episode, episode.target]

    episode.process_action

    # the supplied Script is called with two parameters
    #     1. the path to the episodefile
    #     2. the seriesname
    #
    if @config[:post_copy_hook] &&
      File.file?(@config[:post_copy_hook]) &&
      File.executable?(@config[:post_copy_hook]) &&
      episode.action.match(/copy/i)

      puts "Calling Post-Copy-Hook for this episode"
      cmd = '%s "%s" "%s"' %
      [ @config[:post_copy_hook], episode.episodepath, episode.target ]

      system(cmd) or fail "Post-Copy-Hook ends not succesfully"
    end
  end


  def should_start_with_processing?

    print "\n\nStart processing the episodes ? [yJ]"
    char = get_character
    print char.chr

    unless char.chr.match(/[jy\r]/i)
      puts "\nwill exit ...\n\n"
      return false
    end

    true
  end
end

cmd = Serienmover::Cmdline.new(config, options)
begin
  cmd.process
rescue Interrupt => e
  puts
end

